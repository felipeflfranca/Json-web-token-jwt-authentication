{"version":3,"sources":["logo.png","App.tsx","index.tsx"],"names":["isNative","Platform","OS","styles","StyleSheet","create","scrollView","width","flex","container","backgroundColor","alignItems","justifyContent","logo","height","smallText","fontSize","title","color","fontWeight","text","link","button","borderRadius","padding","marginVertical","marginTop","buttonText","App","useState","wasRotated","setwasRotated","spinValue","useRef","Animated","Value","current","isDarkMode","useColorScheme","console","log","spin","interpolate","inputRange","outputRange","SafeAreaView","style","StatusBar","barStyle","ScrollView","contentInsetAdjustmentBehavior","contentContainerStyle","View","Image","source","require","transform","rotate","Pressable","onPress","timing","toValue","duration","easing","Easing","linear","useNativeDriver","start","Text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oHAAA,OAAe,cAA0B,kC,2LCgBnCA,EAA2B,QAAhBC,IAASC,GAuDpBC,EAASC,IAAWC,OAAO,CAC/BC,WAAY,CACVC,MAAO,OACPC,KAAM,GAERC,UAAW,CACTD,KAAM,EACNE,gBAAiB,UACjBC,WAAY,SACZC,eAAgB,UAElBC,KAAM,CACJN,MAAO,IACPO,OAAQ,KAEVC,UAAW,CACTC,SAAU,GAEZC,MAAO,CACLC,MAAO,OACPC,WAAY,OACZH,SAAU,IAEZI,KAAM,CACJF,MAAO,QAETG,KAAM,CACJH,MAAO,WAETI,OAAQ,CACNC,aAAc,EACdC,QAAS,GACTC,eAAgB,GAChBC,UAAW,GACXhB,gBAAiB,WAEnBiB,WAAY,CACVT,MAAO,OACPC,WAAY,OACZH,SAAU,MAICY,EAhGH,WACV,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAYC,iBAAO,IAAIC,IAASC,MAAM,IAAIC,QAC1CC,EAAkC,SAArBC,cAInBC,QAAQC,IAAIvC,IAASC,IAErB,IAUMuC,EAAOT,EAAUU,YAAY,CACjCC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,OAAQ,YAGxB,OACE,eAACC,EAAA,EAAD,CAAcC,MAAO3C,EAAOG,WAA5B,UACE,cAACyC,EAAA,EAAD,CAAWC,SAAUX,EAAa,gBAAkB,iBACpD,cAACY,EAAA,EAAD,CACEC,+BAA+B,YAC/BJ,MAAO3C,EAAOG,WACd6C,sBAAuBhD,EAAOG,WAHhC,SAIE,eAAC8C,EAAA,EAAD,CAAMN,MAAO3C,EAAOM,UAApB,UACE,cAACyB,EAAA,EAASmB,MAAV,CACEC,OACEtD,EACIuD,EAAQ,IACR,iCAENT,MAAO,CAAC3C,EAAOU,KAAM,CAAC2C,UAAW,CAAC,CAACC,OAAQhB,QAG7C,cAACiB,EAAA,EAAD,CAAWC,QAhCH,WACd5B,GAAeD,GACfI,IAAS0B,OAAO5B,EAAW,CACzB6B,QAAS/B,EAAa,EAAI,EAC1BgC,SAAU,IACVC,OAAQC,IAAOC,OACfC,iBAAiB,IAChBC,SAyBgCrB,MAAO3C,EAAOmB,OAA3C,SACE,eAAC8C,EAAA,EAAD,CAAMtB,MAAO3C,EAAOwB,WAApB,gCACqB,cAACyC,EAAA,EAAD,CAAMtB,MAAO3C,EAAOY,UAApB,oBADrB,yBCtDZsD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ddd0a1fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.88b35fb7.png\";","import React, {useRef, useState} from 'react';\r\nimport {\r\n  SafeAreaView,\r\n  ScrollView,\r\n  StatusBar,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Platform,\r\n  Pressable,\r\n  Animated,\r\n  Easing,\r\n  useColorScheme,\r\n  Linking,\r\n} from 'react-native';\r\n\r\nconst isNative = Platform.OS !== 'web';\r\n\r\nconst App = () => {\r\n  const [wasRotated, setwasRotated] = useState(false);\r\n  const spinValue = useRef(new Animated.Value(0)).current;\r\n  const isDarkMode = useColorScheme() === 'dark';\r\n\r\n  //'http://localhost:3000/logo.png'\r\n\r\n  console.log(Platform.OS);\r\n\r\n  const onPress = () => {\r\n    setwasRotated(!wasRotated);\r\n    Animated.timing(spinValue, {\r\n      toValue: wasRotated ? 0 : 1,\r\n      duration: 250,\r\n      easing: Easing.linear,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n  const spin = spinValue.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: ['0deg', '360deg'],\r\n  });\r\n\r\n  return (\r\n    <SafeAreaView style={styles.scrollView}>\r\n      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />\r\n      <ScrollView\r\n        contentInsetAdjustmentBehavior=\"automatic\"\r\n        style={styles.scrollView}\r\n        contentContainerStyle={styles.scrollView}>\r\n        <View style={styles.container}>\r\n          <Animated.Image\r\n            source={\r\n              isNative\r\n                ? require('./logo.png')\r\n                : 'http://localhost:3000/logo.png'\r\n            }\r\n            style={[styles.logo, {transform: [{rotate: spin}]}]}\r\n          />\r\n\r\n          <Pressable onPress={onPress} style={styles.button}>\r\n            <Text style={styles.buttonText}>\r\n              Clique para o John <Text style={styles.smallText}>dar ou</Text>\r\n              Travolta\r\n            </Text>\r\n          </Pressable>\r\n        </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  scrollView: {\r\n    width: '100%',\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#282c34',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  logo: {\r\n    width: 300,\r\n    height: 300,\r\n  },\r\n  smallText: {\r\n    fontSize: 9,\r\n  },\r\n  title: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  text: {\r\n    color: '#fff',\r\n  },\r\n  link: {\r\n    color: '#1B95E0',\r\n  },\r\n  button: {\r\n    borderRadius: 3,\r\n    padding: 20,\r\n    marginVertical: 10,\r\n    marginTop: 10,\r\n    backgroundColor: '#1B95E0',\r\n  },\r\n  buttonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals;\r\n"],"sourceRoot":""}